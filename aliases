# === Config ===
YEAR=2025
DROPBOX_NOTES=~/Dropbox/$YEAR/notes
DOTFILES=~/src/dotfiles

# === Navigation Aliases ===
alias s="cd ~/src"
alias dk="cd ~/docker"
alias dot="cd $DOTFILES"
alias n="mkdir -p $DROPBOX_NOTES; vim $DROPBOX_NOTES"
alias nn="mkdir -p $DROPBOX_NOTES; cd $DROPBOX_NOTES"
alias drop="mkdir -p ~/Dropbox/$YEAR; cd ~/Dropbox/$YEAR"

# === Editing Aliases ===
alias vim="nvim"
alias v="vim ."
alias vv="vim ~/.vimrc"
alias ali="vim ~/.aliases; source ~/.aliases"
alias z="vim ~/.zshrc; source ~/.zshrc"
alias e="vim ~/.global.env; source ~/.global.env"
alias t="vim ~/.tmux.conf; tmux source ~/.tmux.conf"
alias ss="vim ~/.ssh/config"
alias oo="vim ~/Dropbox/obsidian"
alias conf="vim $DOTFILES"
alias bb="vim $DOTFILES/brewfile"
alias brewup="brew bundle --file=$DOTFILES/brewfile"

# === Finder Aliases ===
alias showall='defaults write com.apple.finder AppleShowAllFiles TRUE; killall Finder'
alias hideall='defaults write com.apple.finder AppleShowAllFiles FALSE; killall Finder'

# === Search Aliases ===
alias ag='ag --path-to-ignore ~/.agignore'

# === Ruby & Bundler Aliases ===
alias be="bundle exec"
mx() {
  unset RUBYOPT
  mise exec -- "$@"
  export RUBYOPT="-W:no-deprecated -W:no-experimental"
}

# === Python Aliases ===
alias python="python3.12"
alias pip="pip3"

# === Network & Firewall Aliases ===
alias killen='sudo pfctl -Fa -f ~/.killswitch.pf.conf -e'
alias killoff='sudo pfctl -Fa -f /etc/pf.conf -e'
alias killdis='sudo pfctl -d'
alias kglock='sudo pfctl -Fa -f /etc/kg.pf.conf -e'
alias kgunlock='sudo pfctl -Fa -f /etc/pf.conf -e'
alias flush="sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder"

# === Docker Aliases ===
alias de="docker exec -it"
alias ds="docker_shell"
alias dr="docker_run"
alias dp="docker ps"
alias di="docker images"
alias dl="docker logs"
alias dcl="docker container list --all"
alias db="docker buildx"
alias dcr="docker container rm"

# PostgreSQL
alias pg="docker start postgresql"
alias pgr="docker run --name postgresql -d -p 5432:5432 -e POSTGRES_HOST_AUTH_METHOD=trust -v /var/run/postgresql:/tmp -v ~/pgdata:/var/lib/postgresql/data postgres"
alias pgx="docker stop postgresql"
alias pq="docker exec -it postgresql psql -U postgres"

# Redis
alias red="docker start redis"
alias redr="docker run --name redis -d -p 6379:6379 redis redis-server --appendonly yes"
alias reds="docker stop redis"

# === Git Aliases ===
alias gs="git status"
alias ga="git add"
alias gc="git commit"
alias gd="git diff"
alias gd-="git diff --cached"
alias gdm="git diff main origin/main"
alias gco="git checkout"
alias gt="git tag -a"
alias gic="git init; git add .; git commit -m 'Omnium rerum principia parva sunt.'"
alias gp="git push origin main"
alias grap="git_remote_add_push"
alias gg="gic && hc && grap"
alias ggp="gic && hcp && grap"

# GitHub CLI
alias hc="hub create"
alias hcp="hub create -p"
alias hb="hub browse"
alias hd="hub delete thejonanshow/${PWD##*/}"

# === Kubernetes Aliases ===
alias k="kubectl"
alias kg="kubectl get"
alias kd="kubectl delete"
alias kl="kubectl logs"

# === Testing Aliases ===
alias rr="rake spec"
alias ff="rspec --next-failure"

# === Compression & Encryption ===
alias tarc="tar_compress"
alias tarx="tar_decompress"
alias pem="convert_pub_to_pem"
alias enc="encrypt_file_with_public_key"

# === Miscellaneous ===
alias spotify="spt"
alias sy="say -v 'Sandy en_GB'"
alias m="macdown"
alias fonts="$DOTFILES/scripts/install_nerd_fonts.sh"
alias mm="cd ~/Library/Application\ Support/minecraft/saves"

# === Cargo & Rust Aliases ===
alias cb="cargo build"

# === Heroku Aliases ===
alias h="heroku"
alias hd="git push heroku main"

# === Functions ===
function encrypt_file_with_public_key() {
  local pem_file
  pem_file=$(convert_pub_to_pem "$2")
  openssl rsautl -encrypt -pubin -inkey "$pem_file" < "$1" > "$1.enc"
  echo "$1 was encrypted with $2: $1.enc"
  echo "To decrypt: openssl rsautl -decrypt -inkey ~/.ssh/id_rsa < $1.enc"
}

function convert_pub_to_pem() {
  local name
  name=$(basename "$1" .pub)
  ssh-keygen -f "$1" -e -m PKCS8 > "$name.pem.pub"
  echo "$name.pem.pub"
}

function docker_shell() {
  local last_id
  last_id=$(docker container ls -lq)
  docker exec -it "$last_id" /bin/bash
}

function git_remote_add_push() {
  git remote add origin git@github.com:thejonanshow/${PWD##*/}.git
  git branch -M main
  git push -u origin main
}

function docker_run() {
  docker run -it --rm "$(docker images | awk 'NR==2 {print $3}')" /bin/sh
}

function tar_compress() {
  tar -cvzf "$1.tar.gz" "$1"
}

function tar_decompress() {
  tar -xvzf "$1"
}

deployvim() {
  if [ -z "$1" ]; then
    echo "Usage: deployvim <server>"
    return 1
  fi
  ssh "$1" "curl -sL https://raw.githubusercontent.com/thejonanshow/vimlite/refs/heads/master/.vimrc -o ~/.vimrc"
}

function furyi() {
  gem install "$1" -s "$(ruby -e "print ['https://', File.read(File.join(Dir.home, '.netrc')).match(/fury.+\n.+\n\  password (.+)/)[1] + '@gem.fury.io/thejonanshow/'].join.strip")"
}

function gemfury_source() {
  ruby -e "print ['https://', File.read(File.join(Dir.home, '.netrc')).match(/fury.+\n.+\n\  password (.+)/)[1] + '@gem.fury.io/thejonanshow/'].join.strip" | pbcopy
  echo "Copied Gemfury source!"
}

crates() {
  local repo_dir="$HOME/src/criner"

  if [ ! -d "$repo_dir/.git" ]; then
    echo "Cloning criner repository..."
    git clone git@github.com:the-lean-crate/criner.git "$repo_dir"
  else
    echo "Checking for updates in criner repository..."
    cd "$repo_dir" || exit 1

    # Ensure we are on the main branch and fetch latest updates
    git fetch origin

    # Check if working directory is clean
    if [ -z "$(git status --porcelain=v1 2>/dev/null)" ]; then
      echo "Repository is clean. Pulling latest changes..."
      git pull --rebase
    else
      echo "WARNING: Local changes detected in criner repository."
      echo "Run 'git stash' or 'git commit' before updating."
      return 1
    fi
  fi

  cargo run --release -- mine
}
